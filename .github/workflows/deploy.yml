name: Deploy Project

on:
    push:
        branches:
            - deploy

jobs:
    deploy:
        runs-on: ubuntu-latest

        env:
            PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
            HOST_IP: ${{ secrets.HOST_IP }}
            HOST_USERNAME: ${{ secrets.HOST_USERNAME }}
            PROJECT_PORT: ${{ secrets.PROJECT_PORT }}
            ENV_TEXT: ${{ secrets.ENV_TEXT }}

        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 9
                  run_install: false

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'pnpm'

            - name: Create .env file
              run: echo "${{ env.ENV_TEXT }}" > .env

            - name: Install dependencies & build
              run: |
                  pnpm install
                  pnpm build

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image for arm64
              run: |
                  docker buildx build \
                    --platform linux/arm64 \
                    -t ${{ env.PROJECT_NAME }} \
                    --load .

            - name: Save Docker image as tar
              run: docker save ${{ env.PROJECT_NAME }} -o ${{ env.PROJECT_NAME }}.tar

            - name: Ensure remote directory exists
              uses: appleboy/ssh-action@v0.1.8
              with:
                  host: ${{ secrets.HOST_IP }}
                  username: ${{ secrets.HOST_USERNAME }}
                  key: ${{ secrets.PEM_KEY }}
                  port: 22
                  script: |
                      mkdir -p Desktop/containers/${{ env.PROJECT_NAME }}

            - name: Transfer image tar to remote
              uses: appleboy/scp-action@v0.1.3
              with:
                  host: ${{ secrets.SERVER_ADDRESS }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  password: ${{ secrets.SERVER_PASSWORD }}
                  port: ${{ secrets.SERVER_PORT }}
                  source: ./${{ env.PROJECT_NAME }}.tar
                  target: Desktop/containers/${{ env.PROJECT_NAME }}

            - name: Transfer compose file to remote
              uses: appleboy/scp-action@v0.1.3
              with:
                  host: ${{ secrets.SERVER_ADDRESS }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  password: ${{ secrets.SERVER_PASSWORD }}
                  port: ${{ secrets.SERVER_PORT }}
                  source: ./docker-compose.yml
                  target: Desktop/containers/${{ env.PROJECT_NAME }}

            - name: Load image & deploy via nerdctl on remote (Mac mini)
              uses: appleboy/ssh-action@v0.1.8
              with:
                  host: ${{ secrets.SERVER_ADDRESS }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  password: ${{ secrets.SERVER_PASSWORD }}
                  port: ${{ secrets.SERVER_PORT }}
                  script: |
                      cd Desktop/containers/${{ env.PROJECT_NAME }}

                      if [ ! -f ${{ env.PROJECT_NAME }}.tar ]; then
                        echo "Image tar not found!"
                        exit 1
                      fi

                      old=$(colima nerdctl -- images -q ${{ env.PROJECT_NAME }}:latest)
                      if [ -n "$old" ]; then
                        colima nerdctl -- rmi -f $old
                      fi

                      colima nerdctl -- load -i ${{ env.PROJECT_NAME }}.tar

                      PROJECT_NAME=${{ env.PROJECT_NAME }} PROJECT_PORT=${{ env.PROJECT_PORT }} \
                        colima nerdctl -- compose down
                      PROJECT_NAME=${{ env.PROJECT_NAME }} PROJECT_PORT=${{ env.PROJECT_PORT }} \
                        colima nerdctl -- compose up -d

            - name: Cleanup local tar
              run: rm ${{ env.PROJECT_NAME }}.tar
